body {
    font-family: 'Poppins', sans-serif;
    font-weight: 300;
    /* font의 가중치=두께. */
}

header {
    position: relative;
}

/* css를 사용했을 때 이렇게 적으면 됨. 여기서는 부트스트랩을 사용하는 듯? */
/* header .container { */
    /* display: flex; */
    /* logo와 nav-link들을 수평정렬하기 위함. */
    /* -> 정렬하고자 하는 요소들의 부모 요소에 'display: flex'를 넣음. */
    /* align-items: center; */
    /* 수직 가운데 정렬 */
    /* padding-top: 20px;
    padding-bottom: 20px; */
    /* 위 아래 내부 여백 주기 */
/* } */

header .forms input.form-control {
    color: white;
    background-color: rgba(255, 255, 255, 0.15);
    /* 투명도를 가지는 색상이면 rgba() 함수 사용 a-투명도 */
    border-color: rgba(255, 255, 255, .3);
}

/* : - 가상클래스 선택자, :: - 가상요소 선택자 */
header .forms input.form-control::placeholder {
    color: rgba(255, 255, 255, 0.6);
}

header [data-bs-toggle="offcanvas"] {
    display: none;
    /* 해당 토글은 반응형이기 때문에 너비가 줄었을 때 보여야 한다. 그래서 일단은 안 보이게 해둠! */
}

header .offcanvas .list-group-item {
    padding: 16px;
}

header .offcanvas .list-group-item a {
    color: black;
    text-decoration: none;
}

header .offcanvas .list-group-item a:hover {
    text-decoration: underline;
}

/* 최대 너비가 992px일 때, 즉, 너비가 992px 이하일 때 어떻게 할 것인지 정의. */
@media (max-width: 992px) {
    header .logo {
        flex-grow: 1;
        /* default: 0 */
        /* Sign up+토글 버튼이 제일 오른쪽으로 배치되게 하기 위해 */
        /* 로고의 최대 너비를 1로 만들면 버튼들이 오른쪽으로 밀리게 됨. */
    }

    /* 토글바가 보이면 navbar는 안 보여야 하기 때문에, none을 추가함. */
    header .nav,
    header .forms input.form-control,
    header .forms .btn-link {
        display: none;
    }
    /* 토글바 뿐만 아니라 검색창, 로그인 버튼까지 없어져야 함. */
    /* 속성이 같으면 한 번에 묶어서 설정할 수도 있음. */

    header [data-bs-toggle="offcanvas"] {
        display: block;
        /* 숨겨놓은 요소를 보여지게 함. */
    }
}

section.hero {
    background-color: #040d22;
    position: relative;
    /* 자식 요소 배치에 기준이 되는 부모 요소가 있어야 하기 때문에 relative 입력. */
    overflow: hidden;
    /* 자신의 영역을 넘어가는 자식 요소들은 숨김. */
}

section.hero img.globe {
    width: 900px;
    position: absolute;
    top: -5%;
    left: 46%;
}
section.hero img.glow {
    width: 200%;
    height: 200%;
    position: absolute;
    top: 50%;
    left: 50%;
    /* 부모 요소 즉, section.hero의 위, 왼쪽 50%에 배치. */
    /* 하지만, 왼쪽 위 모서리를 기준으로 50%에 배치되기 때문에 정 가운데가 아님. */
    transform: translate(-50%, -50%);
    /* transform: translate() - 이동하는 변환 속성. 자신의 가로, 세로 크기의 50%씩 이동하는 것으로, */
    /* 이걸 넣음으로써 부모요소(section.hero)의 정 가운데가 됨. */
    /* 여기서, top/left와 translate의 퍼센트는 기준이 서로 다르다. */
    /* top/left는 부모요소(section.hero) 기준, translate는 본인(img.glow)의 가로, 세로를 기준으로 함.    */
}

section.hero .container {
    padding-top: 160px;
    padding-bottom: 160px;
    position: relative;
    /* 구조적으로 이미지를 header보다 먼저 올림으로써 header가 위로 올라오게 했지만, 여전히 header가 위가 아님. */
    /* position 속성이 있는 요소를 더 위로 쌓는 특성이 있어 header, container가 더 위로 쌓이게 하기 위해 position: relative(기준이 되게 하는.. 그냥 기본적인 거)를 적어줌. */
}

section.hero .headline h1 {
    font-size: 68px;
    font-weight: 700;
    letter-spacing: -2px;
     /* 글자와 글자 사이의 간격 */
}

section.hero .headline.p {
    font-size: 26px;
}

/* 강의 코드랑 변경됨. */
section.hero .curve {
    width: 100%;
    transform: scaleY(.5);
    transform-origin: bottom;
    position: absolute;
    bottom: 0;
    left: 0;
}

section.youtube {

}

section.youtube .container {
    padding-top: 90px;
    padding-bottom: 70px;
    position: relative;
}

section.youtube img.astronaut {
    width: 480px;
    position: absolute;
    top: -420px;
    right: 0;
}

section.youtube .ratio {
    border-radius: 10px;
    overflow: hidden;
    background-color: black;
}

/* 768px 이하일 때 */
@media (max-width: 768px) {
    section.youtube img.astronaut {
        display: none;
        /* 이때는 우주비행사 이미지를 안 보이게 함. */
    }
}

section.features {

}

section.features .container {
    padding-top: 30px;
    padding-bottom: 30px;
}

section.features .card {
    color: #627597;
    border: none;
}

section.features .card img {
    /* padding-top: 30px;
    padding-bottom: 30px;
    padding-left: 60px;
    padding-right: 60px; */
    padding: 30px 60px;
    /* 30: 위 아래, 60: 좌 우 */
}

@media (max-width: 576px) {
    section.features .card img {
        padding: 20px 30px;
        /* 너비가 576px 이하이면 카드 이미지의 여백을 줄여줌. */
    }
}

section.map {

}
section.map .container {
    padding-top: 100px;
    padding-bottom: 100px;
    color: #627597;
}

section.map h1 {
    font-size: 44px;
    font-weight: 700;
}

section.map p {
    font-size: 24px;
}

/* class는 중복 가능한 이름을 설정할 수 있기 때문에 어느 요소에 속한지를 다 적어왔음. */
/* 하지만 id는 중복할 수 없기 때문에 조상요소의 선택자를 적어주지 않아도 됨. */
#map {
    height: 500px;
    border: 1px solid rgba(0, 0, 0, .2);
    border-radius: 10px;
    z-index: 1;
    /* z-index: 우리가 보이는 웹사이트는 2D(x, y축)이지만, 원래는 z축이 숨겨져 있는 3D임. */
    /* 기본은 z-index가 0으로 설정되어 있는데, 0보다 큰 값을 넣으면 사용자가 볼 수 있도록 위쪽에 쌓는 느낌. 즉, 이 요소를 제일 위에 쌓겠다는 뜻. */
}

footer {
    background-color: #040d22;
    position: relative;
    margin-top: 20%;
    /* illustration이 위로 올라오기 때문에 공간확보를 위함. */
}

/* 강의 코드랑 변경됨. */
footer .curve {
    width: 100%;
    transform: scaleY(-.5) translateY(50%);
    /* 상하 반전. */
    position: absolute;
    top: 0;
    left: 0;
}

footer .container {

}

footer img.illustration {
    width: 100%;
    /* 이미지 사이즈가 너무 커서 부모 요소 크기를 넘어갔었음. */
    /* 그렇기 때문에 부모 요소의 크기에 딱 맞춰서 배정되게 함. */
    /* 즉 container의 가로 너비의 100%를 차지한다는 뜻. */
    margin-top: -33%;
    /* -를 씀으로써 위로 올라가게 되어 map을 가리게 됨. */
    margin-bottom: 50px;
    transform: scale(-1, 1);
    /* 좌우 반전(x축에 -를 붙임으로써 뒤집음) */
}

footer img.logo {
    opacity: .4;
    /* 불투명도 */
}

footer h5 {
    font-weight: 700;
    color: rgba(255, 255, 255, .4);
    margin-bottom: 20px;
}

footer ul li {
    margin-bottom: 10px;
}

footer ul li a {
    color: rgba(255, 255, 255, .4);
    text-decoration: none;
    transition: .3s;
    /* 불투명도가 .4인 글자색을 마우스를 올리면 .3초만에 자연스럽게 흰색으로 변하게 하는 속성. */
}

footer ul li a:hover {
    color: white;
}

footer .site-links {
    margin: 0;
    /* 상하좌우 위아래 여백이 0으로 초기화 됨. */
    margin-top: 60px;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.05);
    display: flex;
    /* 자식 요소들 수평 정렬! */
    justify-content: center;
    /* 자식요소 가운데 정렬! */
    flex-wrap: wrap;
    /* 줄바꿈 처리가 가능하겠다. 즉, 공간이 부족하면 아래로 내려가게 하겠다. */
}

footer .site-links li {
    color: rgba(255, 255, 255, .4);
    margin: 0;
    /* footer ul li 요소 속성에서 margin-bottom: 10px;을 줘서 모든 li 태그들에도 여백이 들어감. */
    /* 이를 초기화하기 위해 margin: 0을 적고, 다시 20px 설정. */
    margin-right: 20px;
    /* 맨 마지막 요소도 20px의 여백이 있을테니, 이걸 포함하여 가운데 정렬이 됨. */
    /* 그렇게 때문에 요소들이 왼쪽으로 치우쳐져 있다고 느낄 수 있음. */
    /* 그래서 맨 마지막 요소는 20px의 여백을 사용하지 않겠다고 정의해 줘야 함. */
}

footer .site-links li:last-child {
    margin-right: 0;
    /* 마지막 요소만 가지고 와서 여백을 0으로 함으로써 정확한 가운데 정렬을 할 수 있게 됨. */
}

@media (max-width: 992px) {
    footer {
        text-align: center;
        /* 줄어들면 모든 글자는 가운데 정렬을 하겠다! */
    }

    footer img.logo {
        margin-bottom: 50px;
        /* 한 줄에 로고 하나만 표기될 거기 때문에, 아래 여백을 좀 두는 것. */
    }
}